---
# Preamble

## Author
author:
  name: Артём Дмитриевич Петлин
  degrees: Student
  orcid: 0000-0002-0877-7063
  email: 1132246846@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: Лабораторная работа №6
license: CC BY
date: 2025-10-10
## Generic options
lang: ru-RU
crossref:
  lof-title: Список иллюстраций
  lot-title: Список таблиц
  lol-title: Листинги
## Formats
format:
### Pdf output format
  beamer:
    toc: true
    toc-title: Содержание
    number-sections: true
    colorlinks: false
    toc-depth: 2
    slide_level: 2
    aspectratio: 169
    section-titles: true
    theme: metropolis
    themeoptions: progressbar=frametitle,sectionpage=progressbar,numbering=fraction
#### Language
    babel-lang: russian
    babel-otherlangs: english
### Html output
  revealjs:
    transition: slide
    margin: 0.2
    smaller: false
    output-ext: html
    theme: beige
    logo: _resources/image/logo_rudn.png
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Петлин Артём Дмитриевич
  * студент
  * группа НПИбд-02-24
  * Российский университет дружбы народов
  * [1132246846@pfur.ru](mailto:1132246846@pfur.ru)
  * <https://github.com/hikrim/study_2025-2026_os2>

:::
::: {.column width="30%"}

![](./image/foto2.jpg)

:::
::::::::::::::

# Цель работы

## Цель работы

Получить навыки управления процессами операционной системы.

# Задание

## Задание

1. Продемонстрируйте навыки управления заданиями операционной системы (см. раздел 6.4.1).
2. Продемонстрируйте навыки управления процессами операционной системы (см. раздел 6.4.2).
3. Выполните задания для самостоятельной работы (см. раздел 6.5)

# Теоретическое введение

## Теоретическое введение

Под процессом в операционной системе понимается абстракция, описывающая вы-
полняющуюся программу.
Информацию о выполняющихся в операционной системе типа Unix процессах можно
получить, например, с помощью команд ps, top, htop.

# Выполнение лабораторной работы

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Получаем полномочия администратора. Запускаем несколько фоновых процессов и один длительный процесс на переднем плане. Введите Ctrl + z , чтобы остановить
процесс. 

:::
::: {.column width="60%"}

![su -](image/1.png){#fig-001 width=100%}

:::
::::::::::::::





## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Возобновляем выполнение приостановленного задания в фоновом режиме и наблюдаем изменение его статуса. Перемещаем одно из заданий на передний план. Завершаем выполнение задания на переднем плане с помощью комбинации клавиш и проверяем изменения в списке заданий.

:::
::: {.column width="60%"}

![bg | fg](image/2.png){#fig-002 width=100%}

:::
::::::::::::::




## Ход работы

![ctrl + z](image/3.png){#fig-003 width=100%}

Последовательно завершаем оставшиеся задания. 

## Ход работы

![&](image/4.png){#fig-004 width=100%}

На втором терминале запускаем фоновый процесс от имени обычного пользователя. Закрываем второй терминал. На другом терминале проверяем, что процесс продолжает выполняться, с помощью системного монитора.

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="20%"}

Завершаем оставшийся процесс через системный монитор.

:::
::: {.column width="40%"}

![top](image/5.png){#fig-005 width=100%}

:::
::: {.column width="40%"}

![top](image/6.png){#fig-006 width=100%}

:::
::::::::::::::







## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Получаем полномочия администратора. Запускаем несколько фоновых процессов. Просматриваем информацию о запущенных процессах, фильтруя нужные нам процессы.

:::
::: {.column width="60%"}

![su -](image/7.png){#fig-007 width=100%}

:::
::::::::::::::





## Ход работы

![renice](image/8.png){#fig-008 width=100%}

Изменяем приоритет одного из процессов, используя его идентификатор.

## Ход работы

![ps fax | grep -B5 dd](image/9.png){#fig-009 width=100%}

Изучаем иерархию процессов, просматривая связи между родительскими и дочерними процессами.

## Ход работы

![kill -9](image/10.png){#fig-010 width=100%}

Завершаем родительский процесс, что приводит к автоматическому завершению всех связанных дочерних процессов.

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Запускаем три фоновых процесса. Повышаем приоритет одного из процессов, устанавливая отрицательное значение. Дополнительно изменяем приоритет того же процесса, устанавливая другое значение, и анализируем разницу в приоритетах.

:::
::: {.column width="60%"}

![renice](image/11.png){#fig-011 width=100%}

:::
::::::::::::::





## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Завершаем все запущенные процессы.

:::
::: {.column width="60%"}

![killa -9](image/12.png){#fig-012 width=100%}

:::
::::::::::::::





## Ход работы

![yes](image/13.png){#fig-013 width=100%}

Запускаем фоновый процесс с перенаправлением вывода. Запускаем процесс на переднем плане с перенаправлением вывода, приостанавливаем его, затем возобновляем и завершаем.

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="20%"}

Запускаем процесс на переднем плане без перенаправления вывода, приостанавливаем, возобновляем и завершаем его.

:::
::: {.column width="40%"}

![ctrl + z](image/14.png){#fig-014 width=100%}

:::
::: {.column width="40%"}

![ctrl + c](image/15.png){#fig-015 width=100%}

:::
::::::::::::::







## Ход работы

![yes](image/16.png){#fig-016 width=100%}

Проверяем состояния всех заданий. Переводим фоновый процесс на передний план и останавливаем его.

## Ход работы

![yes](image/17.png){#fig-017 width=100%}

Переводим процесс с перенаправлением вывода в фоновый режим. Проверяем состояния заданий, обращая внимание на процессы, выполняющиеся в фоновом режиме.

## Ход работы

![nohup](image/18.png){#fig-018 width=100%}

Запускаем процесс таким образом, чтобы он продолжал работу после закрытия терминала.

## Ход работы

![ps -A](image/19.png){#fig-019 width=100%}

Закрываем и заново открываем терминал, проверяя продолжение работы процесса. Изучаем информацию о запущенных процессах с помощью системного монитора.

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Запускаем три дополнительных фоновых процесса с перенаправлением вывода. Завершаем два процесса разными способами: по идентификатору процесса и по идентификатору задания. 

:::
::: {.column width="60%"}

![yes](image/20.png){#fig-020 width=100%}

:::
::::::::::::::





## Ход работы

![kill -1](image/21.png){#fig-021 width=100%}

Отправляем сигнал завершения процессу, запущенному с защитой от разрыва связи, и обычному процессу, сравнивая их поведение.

## Ход работы

:::::::::::::: {.columns align=center}
::: {.column width="40%"}

Запускаем несколько дополнительных фоновых процессов. Завершаем все процессы одновременно с помощью команды группового завершения.

:::
::: {.column width="60%"}

![killall](image/22.png){#fig-022 width=100%}

:::
::::::::::::::





## Ход работы

![yes](image/23.png){#fig-023 width=100%}

Запускаем два процесса с разными приоритетами и сравниваем их абсолютные и относительные приоритеты.

## Ход работы

![renice](image/24.png){#fig-024 width=100%}

Выравниваем приоритеты двух процессов, изменяя значение приоритета для одного из них.

# Выводы

## Выводы

Мы получили навыки управления процессами операционной системы.

# Список литературы{.unnumbered}

## Список литературы{.unnumbered}

::: {.refs}
1. Поттеринг Л. Systemd для администраторов: цикл статей. — 2010. — URL: http:
//wiki.opennet.ru/Systemd.
2. Neil N. J. Learning CentOS: A Beginners Guide to Learning Linux. — CreateSpace Inde-
pendent Publishing Platform, 2016.
3. Systemd. — 2022. — URL: https://wiki.archlinux.org/title/Systemd.
:::


:::::::::::::: {.columns align=center}
::: {.column width="40%"}



:::
::: {.column width="60%"}



:::
::::::::::::::
